// Code generated by go-bindata.
// sources:
// css/feedback.css
// css/flaticon.css
// fonts/flaticon.eot
// fonts/flaticon.svg
// fonts/flaticon.ttf
// fonts/flaticon.woff
// fonts/license.pdf
// html/admin.html
// html/course-registeredmemberinfo.html
// html/course-registermember.html
// html/help/index.html
// html/help/privacy.html
// html/help/terms.html
// html/home.html
// html/index.html
// html/maincoursepage.html
// html/newcourse-info.html
// html/newcourse-orgselect.html
// html/newcourse-register.html
// html/profile.html
// html/scoreboard.html
// html/teacherresultpage.html
// html/teacherspanel.html
// html/template.html
// img/Aplus.png
// img/Aplus2.png
// img/GitHub-Mark/PNG/GitHub-Mark-120px-plus.png
// img/GitHub-Mark/PNG/GitHub-Mark-32px.png
// img/GitHub-Mark/PNG/GitHub-Mark-64px.png
// img/GitHub-Mark/PNG/GitHub-Mark-Light-120px-plus.png
// img/GitHub-Mark/PNG/GitHub-Mark-Light-32px.png
// img/GitHub-Mark/PNG/GitHub-Mark-Light-64px.png
// img/GitHub-Mark/Vector/GitHub-Mark.ai
// img/GitHub-Mark/Vector/GitHub-Mark.eps
// img/flaticon/award52.png
// img/flaticon/award9.png
// img/flaticon/first33.png
// img/flaticon/medal16.png
// img/flaticon/number0.png
// img/flaticon/number1.png
// img/flaticon/number2.png
// img/flaticon/number3.png
// img/flaticon/number32.png
// img/flaticon/number34.png
// img/flaticon/number35.png
// img/flaticon/number36.png
// img/flaticon/number38.png
// img/flaticon/number39.png
// img/flaticon/number4.png
// img/flaticon/number5.png
// img/flaticon/number6.png
// img/flaticon/number7.png
// img/flaticon/number8.png
// img/flaticon/star97.png
// img/flaticon/trophy36.png
// img/intro1.png
// img/intro2.png
// img/intro3.png
// img/intro4.png
// img/overlapping-arrows.png
// js/antiplagiarism.js
// js/codereview.js
// js/resultloader.js
// js/teacher.page.js
// js/teacher.result.page.js
// js/user.page.js
// DO NOT EDIT!

package staticfiles

import (
	"fmt"
	"io/ioutil"
	"strings"
	"os"
	"path/filepath"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// cssFeedbackCss reads file data from disk. It returns an error on failure.
func cssFeedbackCss() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/css/feedback.css"
	name := "css/feedback.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// cssFlaticonCss reads file data from disk. It returns an error on failure.
func cssFlaticonCss() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/css/flaticon.css"
	name := "css/flaticon.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontsFlaticonEot reads file data from disk. It returns an error on failure.
func fontsFlaticonEot() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/fonts/flaticon.eot"
	name := "fonts/flaticon.eot"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontsFlaticonSvg reads file data from disk. It returns an error on failure.
func fontsFlaticonSvg() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/fonts/flaticon.svg"
	name := "fonts/flaticon.svg"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontsFlaticonTtf reads file data from disk. It returns an error on failure.
func fontsFlaticonTtf() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/fonts/flaticon.ttf"
	name := "fonts/flaticon.ttf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontsFlaticonWoff reads file data from disk. It returns an error on failure.
func fontsFlaticonWoff() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/fonts/flaticon.woff"
	name := "fonts/flaticon.woff"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// fontsLicensePdf reads file data from disk. It returns an error on failure.
func fontsLicensePdf() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/fonts/license.pdf"
	name := "fonts/license.pdf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// htmlAdminHtml reads file data from disk. It returns an error on failure.
func htmlAdminHtml() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/html/admin.html"
	name := "html/admin.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// htmlCourseRegisteredmemberinfoHtml reads file data from disk. It returns an error on failure.
func htmlCourseRegisteredmemberinfoHtml() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/html/course-registeredmemberinfo.html"
	name := "html/course-registeredmemberinfo.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// htmlCourseRegistermemberHtml reads file data from disk. It returns an error on failure.
func htmlCourseRegistermemberHtml() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/html/course-registermember.html"
	name := "html/course-registermember.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// htmlHelpIndexHtml reads file data from disk. It returns an error on failure.
func htmlHelpIndexHtml() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/html/help/index.html"
	name := "html/help/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// htmlHelpPrivacyHtml reads file data from disk. It returns an error on failure.
func htmlHelpPrivacyHtml() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/html/help/privacy.html"
	name := "html/help/privacy.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// htmlHelpTermsHtml reads file data from disk. It returns an error on failure.
func htmlHelpTermsHtml() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/html/help/terms.html"
	name := "html/help/terms.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// htmlHomeHtml reads file data from disk. It returns an error on failure.
func htmlHomeHtml() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/html/home.html"
	name := "html/home.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// htmlIndexHtml reads file data from disk. It returns an error on failure.
func htmlIndexHtml() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/html/index.html"
	name := "html/index.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// htmlMaincoursepageHtml reads file data from disk. It returns an error on failure.
func htmlMaincoursepageHtml() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/html/maincoursepage.html"
	name := "html/maincoursepage.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// htmlNewcourseInfoHtml reads file data from disk. It returns an error on failure.
func htmlNewcourseInfoHtml() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/html/newcourse-info.html"
	name := "html/newcourse-info.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// htmlNewcourseOrgselectHtml reads file data from disk. It returns an error on failure.
func htmlNewcourseOrgselectHtml() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/html/newcourse-orgselect.html"
	name := "html/newcourse-orgselect.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// htmlNewcourseRegisterHtml reads file data from disk. It returns an error on failure.
func htmlNewcourseRegisterHtml() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/html/newcourse-register.html"
	name := "html/newcourse-register.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// htmlProfileHtml reads file data from disk. It returns an error on failure.
func htmlProfileHtml() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/html/profile.html"
	name := "html/profile.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// htmlScoreboardHtml reads file data from disk. It returns an error on failure.
func htmlScoreboardHtml() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/html/scoreboard.html"
	name := "html/scoreboard.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// htmlTeacherresultpageHtml reads file data from disk. It returns an error on failure.
func htmlTeacherresultpageHtml() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/html/teacherresultpage.html"
	name := "html/teacherresultpage.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// htmlTeacherspanelHtml reads file data from disk. It returns an error on failure.
func htmlTeacherspanelHtml() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/html/teacherspanel.html"
	name := "html/teacherspanel.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// htmlTemplateHtml reads file data from disk. It returns an error on failure.
func htmlTemplateHtml() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/html/template.html"
	name := "html/template.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgAplusPng reads file data from disk. It returns an error on failure.
func imgAplusPng() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/Aplus.png"
	name := "img/Aplus.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgAplus2Png reads file data from disk. It returns an error on failure.
func imgAplus2Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/Aplus2.png"
	name := "img/Aplus2.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgGithubMarkPngGithubMark120pxPlusPng reads file data from disk. It returns an error on failure.
func imgGithubMarkPngGithubMark120pxPlusPng() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/GitHub-Mark/PNG/GitHub-Mark-120px-plus.png"
	name := "img/GitHub-Mark/PNG/GitHub-Mark-120px-plus.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgGithubMarkPngGithubMark32pxPng reads file data from disk. It returns an error on failure.
func imgGithubMarkPngGithubMark32pxPng() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/GitHub-Mark/PNG/GitHub-Mark-32px.png"
	name := "img/GitHub-Mark/PNG/GitHub-Mark-32px.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgGithubMarkPngGithubMark64pxPng reads file data from disk. It returns an error on failure.
func imgGithubMarkPngGithubMark64pxPng() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/GitHub-Mark/PNG/GitHub-Mark-64px.png"
	name := "img/GitHub-Mark/PNG/GitHub-Mark-64px.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgGithubMarkPngGithubMarkLight120pxPlusPng reads file data from disk. It returns an error on failure.
func imgGithubMarkPngGithubMarkLight120pxPlusPng() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/GitHub-Mark/PNG/GitHub-Mark-Light-120px-plus.png"
	name := "img/GitHub-Mark/PNG/GitHub-Mark-Light-120px-plus.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgGithubMarkPngGithubMarkLight32pxPng reads file data from disk. It returns an error on failure.
func imgGithubMarkPngGithubMarkLight32pxPng() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/GitHub-Mark/PNG/GitHub-Mark-Light-32px.png"
	name := "img/GitHub-Mark/PNG/GitHub-Mark-Light-32px.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgGithubMarkPngGithubMarkLight64pxPng reads file data from disk. It returns an error on failure.
func imgGithubMarkPngGithubMarkLight64pxPng() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/GitHub-Mark/PNG/GitHub-Mark-Light-64px.png"
	name := "img/GitHub-Mark/PNG/GitHub-Mark-Light-64px.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgGithubMarkVectorGithubMarkAi reads file data from disk. It returns an error on failure.
func imgGithubMarkVectorGithubMarkAi() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/GitHub-Mark/Vector/GitHub-Mark.ai"
	name := "img/GitHub-Mark/Vector/GitHub-Mark.ai"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgGithubMarkVectorGithubMarkEps reads file data from disk. It returns an error on failure.
func imgGithubMarkVectorGithubMarkEps() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/GitHub-Mark/Vector/GitHub-Mark.eps"
	name := "img/GitHub-Mark/Vector/GitHub-Mark.eps"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFlaticonAward52Png reads file data from disk. It returns an error on failure.
func imgFlaticonAward52Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/flaticon/award52.png"
	name := "img/flaticon/award52.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFlaticonAward9Png reads file data from disk. It returns an error on failure.
func imgFlaticonAward9Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/flaticon/award9.png"
	name := "img/flaticon/award9.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFlaticonFirst33Png reads file data from disk. It returns an error on failure.
func imgFlaticonFirst33Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/flaticon/first33.png"
	name := "img/flaticon/first33.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFlaticonMedal16Png reads file data from disk. It returns an error on failure.
func imgFlaticonMedal16Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/flaticon/medal16.png"
	name := "img/flaticon/medal16.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFlaticonNumber0Png reads file data from disk. It returns an error on failure.
func imgFlaticonNumber0Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/flaticon/number0.png"
	name := "img/flaticon/number0.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFlaticonNumber1Png reads file data from disk. It returns an error on failure.
func imgFlaticonNumber1Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/flaticon/number1.png"
	name := "img/flaticon/number1.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFlaticonNumber2Png reads file data from disk. It returns an error on failure.
func imgFlaticonNumber2Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/flaticon/number2.png"
	name := "img/flaticon/number2.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFlaticonNumber3Png reads file data from disk. It returns an error on failure.
func imgFlaticonNumber3Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/flaticon/number3.png"
	name := "img/flaticon/number3.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFlaticonNumber32Png reads file data from disk. It returns an error on failure.
func imgFlaticonNumber32Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/flaticon/number32.png"
	name := "img/flaticon/number32.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFlaticonNumber34Png reads file data from disk. It returns an error on failure.
func imgFlaticonNumber34Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/flaticon/number34.png"
	name := "img/flaticon/number34.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFlaticonNumber35Png reads file data from disk. It returns an error on failure.
func imgFlaticonNumber35Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/flaticon/number35.png"
	name := "img/flaticon/number35.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFlaticonNumber36Png reads file data from disk. It returns an error on failure.
func imgFlaticonNumber36Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/flaticon/number36.png"
	name := "img/flaticon/number36.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFlaticonNumber38Png reads file data from disk. It returns an error on failure.
func imgFlaticonNumber38Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/flaticon/number38.png"
	name := "img/flaticon/number38.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFlaticonNumber39Png reads file data from disk. It returns an error on failure.
func imgFlaticonNumber39Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/flaticon/number39.png"
	name := "img/flaticon/number39.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFlaticonNumber4Png reads file data from disk. It returns an error on failure.
func imgFlaticonNumber4Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/flaticon/number4.png"
	name := "img/flaticon/number4.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFlaticonNumber5Png reads file data from disk. It returns an error on failure.
func imgFlaticonNumber5Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/flaticon/number5.png"
	name := "img/flaticon/number5.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFlaticonNumber6Png reads file data from disk. It returns an error on failure.
func imgFlaticonNumber6Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/flaticon/number6.png"
	name := "img/flaticon/number6.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFlaticonNumber7Png reads file data from disk. It returns an error on failure.
func imgFlaticonNumber7Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/flaticon/number7.png"
	name := "img/flaticon/number7.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFlaticonNumber8Png reads file data from disk. It returns an error on failure.
func imgFlaticonNumber8Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/flaticon/number8.png"
	name := "img/flaticon/number8.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFlaticonStar97Png reads file data from disk. It returns an error on failure.
func imgFlaticonStar97Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/flaticon/star97.png"
	name := "img/flaticon/star97.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgFlaticonTrophy36Png reads file data from disk. It returns an error on failure.
func imgFlaticonTrophy36Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/flaticon/trophy36.png"
	name := "img/flaticon/trophy36.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgIntro1Png reads file data from disk. It returns an error on failure.
func imgIntro1Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/intro1.png"
	name := "img/intro1.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgIntro2Png reads file data from disk. It returns an error on failure.
func imgIntro2Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/intro2.png"
	name := "img/intro2.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgIntro3Png reads file data from disk. It returns an error on failure.
func imgIntro3Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/intro3.png"
	name := "img/intro3.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgIntro4Png reads file data from disk. It returns an error on failure.
func imgIntro4Png() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/intro4.png"
	name := "img/intro4.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// imgOverlappingArrowsPng reads file data from disk. It returns an error on failure.
func imgOverlappingArrowsPng() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/img/overlapping-arrows.png"
	name := "img/overlapping-arrows.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsAntiplagiarismJs reads file data from disk. It returns an error on failure.
func jsAntiplagiarismJs() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/js/antiplagiarism.js"
	name := "js/antiplagiarism.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsCodereviewJs reads file data from disk. It returns an error on failure.
func jsCodereviewJs() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/js/codereview.js"
	name := "js/codereview.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsResultloaderJs reads file data from disk. It returns an error on failure.
func jsResultloaderJs() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/js/resultloader.js"
	name := "js/resultloader.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsTeacherPageJs reads file data from disk. It returns an error on failure.
func jsTeacherPageJs() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/js/teacher.page.js"
	name := "js/teacher.page.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsTeacherResultPageJs reads file data from disk. It returns an error on failure.
func jsTeacherResultPageJs() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/js/teacher.result.page.js"
	name := "js/teacher.result.page.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// jsUserPageJs reads file data from disk. It returns an error on failure.
func jsUserPageJs() (*asset, error) {
	path := "/home/ericfree/go/src/github.com/hfurubotten/autograder/web/js/user.page.js"
	name := "js/user.page.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"css/feedback.css": cssFeedbackCss,
	"css/flaticon.css": cssFlaticonCss,
	"fonts/flaticon.eot": fontsFlaticonEot,
	"fonts/flaticon.svg": fontsFlaticonSvg,
	"fonts/flaticon.ttf": fontsFlaticonTtf,
	"fonts/flaticon.woff": fontsFlaticonWoff,
	"fonts/license.pdf": fontsLicensePdf,
	"html/admin.html": htmlAdminHtml,
	"html/course-registeredmemberinfo.html": htmlCourseRegisteredmemberinfoHtml,
	"html/course-registermember.html": htmlCourseRegistermemberHtml,
	"html/help/index.html": htmlHelpIndexHtml,
	"html/help/privacy.html": htmlHelpPrivacyHtml,
	"html/help/terms.html": htmlHelpTermsHtml,
	"html/home.html": htmlHomeHtml,
	"html/index.html": htmlIndexHtml,
	"html/maincoursepage.html": htmlMaincoursepageHtml,
	"html/newcourse-info.html": htmlNewcourseInfoHtml,
	"html/newcourse-orgselect.html": htmlNewcourseOrgselectHtml,
	"html/newcourse-register.html": htmlNewcourseRegisterHtml,
	"html/profile.html": htmlProfileHtml,
	"html/scoreboard.html": htmlScoreboardHtml,
	"html/teacherresultpage.html": htmlTeacherresultpageHtml,
	"html/teacherspanel.html": htmlTeacherspanelHtml,
	"html/template.html": htmlTemplateHtml,
	"img/Aplus.png": imgAplusPng,
	"img/Aplus2.png": imgAplus2Png,
	"img/GitHub-Mark/PNG/GitHub-Mark-120px-plus.png": imgGithubMarkPngGithubMark120pxPlusPng,
	"img/GitHub-Mark/PNG/GitHub-Mark-32px.png": imgGithubMarkPngGithubMark32pxPng,
	"img/GitHub-Mark/PNG/GitHub-Mark-64px.png": imgGithubMarkPngGithubMark64pxPng,
	"img/GitHub-Mark/PNG/GitHub-Mark-Light-120px-plus.png": imgGithubMarkPngGithubMarkLight120pxPlusPng,
	"img/GitHub-Mark/PNG/GitHub-Mark-Light-32px.png": imgGithubMarkPngGithubMarkLight32pxPng,
	"img/GitHub-Mark/PNG/GitHub-Mark-Light-64px.png": imgGithubMarkPngGithubMarkLight64pxPng,
	"img/GitHub-Mark/Vector/GitHub-Mark.ai": imgGithubMarkVectorGithubMarkAi,
	"img/GitHub-Mark/Vector/GitHub-Mark.eps": imgGithubMarkVectorGithubMarkEps,
	"img/flaticon/award52.png": imgFlaticonAward52Png,
	"img/flaticon/award9.png": imgFlaticonAward9Png,
	"img/flaticon/first33.png": imgFlaticonFirst33Png,
	"img/flaticon/medal16.png": imgFlaticonMedal16Png,
	"img/flaticon/number0.png": imgFlaticonNumber0Png,
	"img/flaticon/number1.png": imgFlaticonNumber1Png,
	"img/flaticon/number2.png": imgFlaticonNumber2Png,
	"img/flaticon/number3.png": imgFlaticonNumber3Png,
	"img/flaticon/number32.png": imgFlaticonNumber32Png,
	"img/flaticon/number34.png": imgFlaticonNumber34Png,
	"img/flaticon/number35.png": imgFlaticonNumber35Png,
	"img/flaticon/number36.png": imgFlaticonNumber36Png,
	"img/flaticon/number38.png": imgFlaticonNumber38Png,
	"img/flaticon/number39.png": imgFlaticonNumber39Png,
	"img/flaticon/number4.png": imgFlaticonNumber4Png,
	"img/flaticon/number5.png": imgFlaticonNumber5Png,
	"img/flaticon/number6.png": imgFlaticonNumber6Png,
	"img/flaticon/number7.png": imgFlaticonNumber7Png,
	"img/flaticon/number8.png": imgFlaticonNumber8Png,
	"img/flaticon/star97.png": imgFlaticonStar97Png,
	"img/flaticon/trophy36.png": imgFlaticonTrophy36Png,
	"img/intro1.png": imgIntro1Png,
	"img/intro2.png": imgIntro2Png,
	"img/intro3.png": imgIntro3Png,
	"img/intro4.png": imgIntro4Png,
	"img/overlapping-arrows.png": imgOverlappingArrowsPng,
	"js/antiplagiarism.js": jsAntiplagiarismJs,
	"js/codereview.js": jsCodereviewJs,
	"js/resultloader.js": jsResultloaderJs,
	"js/teacher.page.js": jsTeacherPageJs,
	"js/teacher.result.page.js": jsTeacherResultPageJs,
	"js/user.page.js": jsUserPageJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"css": &bintree{nil, map[string]*bintree{
		"feedback.css": &bintree{cssFeedbackCss, map[string]*bintree{
		}},
		"flaticon.css": &bintree{cssFlaticonCss, map[string]*bintree{
		}},
	}},
	"fonts": &bintree{nil, map[string]*bintree{
		"flaticon.eot": &bintree{fontsFlaticonEot, map[string]*bintree{
		}},
		"flaticon.svg": &bintree{fontsFlaticonSvg, map[string]*bintree{
		}},
		"flaticon.ttf": &bintree{fontsFlaticonTtf, map[string]*bintree{
		}},
		"flaticon.woff": &bintree{fontsFlaticonWoff, map[string]*bintree{
		}},
		"license.pdf": &bintree{fontsLicensePdf, map[string]*bintree{
		}},
	}},
	"html": &bintree{nil, map[string]*bintree{
		"admin.html": &bintree{htmlAdminHtml, map[string]*bintree{
		}},
		"course-registeredmemberinfo.html": &bintree{htmlCourseRegisteredmemberinfoHtml, map[string]*bintree{
		}},
		"course-registermember.html": &bintree{htmlCourseRegistermemberHtml, map[string]*bintree{
		}},
		"help": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{htmlHelpIndexHtml, map[string]*bintree{
			}},
			"privacy.html": &bintree{htmlHelpPrivacyHtml, map[string]*bintree{
			}},
			"terms.html": &bintree{htmlHelpTermsHtml, map[string]*bintree{
			}},
		}},
		"home.html": &bintree{htmlHomeHtml, map[string]*bintree{
		}},
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{
		}},
		"maincoursepage.html": &bintree{htmlMaincoursepageHtml, map[string]*bintree{
		}},
		"newcourse-info.html": &bintree{htmlNewcourseInfoHtml, map[string]*bintree{
		}},
		"newcourse-orgselect.html": &bintree{htmlNewcourseOrgselectHtml, map[string]*bintree{
		}},
		"newcourse-register.html": &bintree{htmlNewcourseRegisterHtml, map[string]*bintree{
		}},
		"profile.html": &bintree{htmlProfileHtml, map[string]*bintree{
		}},
		"scoreboard.html": &bintree{htmlScoreboardHtml, map[string]*bintree{
		}},
		"teacherresultpage.html": &bintree{htmlTeacherresultpageHtml, map[string]*bintree{
		}},
		"teacherspanel.html": &bintree{htmlTeacherspanelHtml, map[string]*bintree{
		}},
		"template.html": &bintree{htmlTemplateHtml, map[string]*bintree{
		}},
	}},
	"img": &bintree{nil, map[string]*bintree{
		"Aplus.png": &bintree{imgAplusPng, map[string]*bintree{
		}},
		"Aplus2.png": &bintree{imgAplus2Png, map[string]*bintree{
		}},
		"GitHub-Mark": &bintree{nil, map[string]*bintree{
			"PNG": &bintree{nil, map[string]*bintree{
				"GitHub-Mark-120px-plus.png": &bintree{imgGithubMarkPngGithubMark120pxPlusPng, map[string]*bintree{
				}},
				"GitHub-Mark-32px.png": &bintree{imgGithubMarkPngGithubMark32pxPng, map[string]*bintree{
				}},
				"GitHub-Mark-64px.png": &bintree{imgGithubMarkPngGithubMark64pxPng, map[string]*bintree{
				}},
				"GitHub-Mark-Light-120px-plus.png": &bintree{imgGithubMarkPngGithubMarkLight120pxPlusPng, map[string]*bintree{
				}},
				"GitHub-Mark-Light-32px.png": &bintree{imgGithubMarkPngGithubMarkLight32pxPng, map[string]*bintree{
				}},
				"GitHub-Mark-Light-64px.png": &bintree{imgGithubMarkPngGithubMarkLight64pxPng, map[string]*bintree{
				}},
			}},
			"Vector": &bintree{nil, map[string]*bintree{
				"GitHub-Mark.ai": &bintree{imgGithubMarkVectorGithubMarkAi, map[string]*bintree{
				}},
				"GitHub-Mark.eps": &bintree{imgGithubMarkVectorGithubMarkEps, map[string]*bintree{
				}},
			}},
		}},
		"flaticon": &bintree{nil, map[string]*bintree{
			"award52.png": &bintree{imgFlaticonAward52Png, map[string]*bintree{
			}},
			"award9.png": &bintree{imgFlaticonAward9Png, map[string]*bintree{
			}},
			"first33.png": &bintree{imgFlaticonFirst33Png, map[string]*bintree{
			}},
			"medal16.png": &bintree{imgFlaticonMedal16Png, map[string]*bintree{
			}},
			"number0.png": &bintree{imgFlaticonNumber0Png, map[string]*bintree{
			}},
			"number1.png": &bintree{imgFlaticonNumber1Png, map[string]*bintree{
			}},
			"number2.png": &bintree{imgFlaticonNumber2Png, map[string]*bintree{
			}},
			"number3.png": &bintree{imgFlaticonNumber3Png, map[string]*bintree{
			}},
			"number32.png": &bintree{imgFlaticonNumber32Png, map[string]*bintree{
			}},
			"number34.png": &bintree{imgFlaticonNumber34Png, map[string]*bintree{
			}},
			"number35.png": &bintree{imgFlaticonNumber35Png, map[string]*bintree{
			}},
			"number36.png": &bintree{imgFlaticonNumber36Png, map[string]*bintree{
			}},
			"number38.png": &bintree{imgFlaticonNumber38Png, map[string]*bintree{
			}},
			"number39.png": &bintree{imgFlaticonNumber39Png, map[string]*bintree{
			}},
			"number4.png": &bintree{imgFlaticonNumber4Png, map[string]*bintree{
			}},
			"number5.png": &bintree{imgFlaticonNumber5Png, map[string]*bintree{
			}},
			"number6.png": &bintree{imgFlaticonNumber6Png, map[string]*bintree{
			}},
			"number7.png": &bintree{imgFlaticonNumber7Png, map[string]*bintree{
			}},
			"number8.png": &bintree{imgFlaticonNumber8Png, map[string]*bintree{
			}},
			"star97.png": &bintree{imgFlaticonStar97Png, map[string]*bintree{
			}},
			"trophy36.png": &bintree{imgFlaticonTrophy36Png, map[string]*bintree{
			}},
		}},
		"intro1.png": &bintree{imgIntro1Png, map[string]*bintree{
		}},
		"intro2.png": &bintree{imgIntro2Png, map[string]*bintree{
		}},
		"intro3.png": &bintree{imgIntro3Png, map[string]*bintree{
		}},
		"intro4.png": &bintree{imgIntro4Png, map[string]*bintree{
		}},
		"overlapping-arrows.png": &bintree{imgOverlappingArrowsPng, map[string]*bintree{
		}},
	}},
	"js": &bintree{nil, map[string]*bintree{
		"antiplagiarism.js": &bintree{jsAntiplagiarismJs, map[string]*bintree{
		}},
		"codereview.js": &bintree{jsCodereviewJs, map[string]*bintree{
		}},
		"resultloader.js": &bintree{jsResultloaderJs, map[string]*bintree{
		}},
		"teacher.page.js": &bintree{jsTeacherPageJs, map[string]*bintree{
		}},
		"teacher.result.page.js": &bintree{jsTeacherResultPageJs, map[string]*bintree{
		}},
		"user.page.js": &bintree{jsUserPageJs, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

